# -*- coding: utf-8 -*-
# Author Zhang Chen
# Email ZhangChen.Shaanxi@gmail.com
# Date 2018/11/24

import re, collections
from utils import corpora_utils
from utils import constants


def get_pair_stats(vocab: dict, char_separator=None):
    """
    get pair frequency count from bag of words
    :param vocab:bag of words, each item is a key:value, which key is word, and value is word count
    :char_separator separator which separate chars in word
    :return: bag of pairs, each item is a key:value, which key is pair, and value is pair count
    """
    pairs = collections.defaultdict(int)
    for word, freq in vocab.items():
        if char_separator != None and char_separator != "":
            word = str(word).split(char_separator)
        for i in range(len(word) - 1):
            pairs[word[i], word[i + 1]] += int(freq)
    return pairs


def merge_vocab(pair_tuple: tuple, vocab_in: dict):
    vocab_out = {}
    space = " "
    empty = ""
    pair_str = space.join(pair_tuple)

    p = re.compile(r'(?<!\S)' + re.escape(pair_str) + r'(?!\S)')
    for word in vocab_in:
        word_out = p.sub(empty.join(pair_tuple), word)
        vocab_out[word_out] = vocab_in[word]
    return vocab_out


def bpe(dic_of_words_with_space, num_merges):
    dic_to_merge = dic_of_words_with_space
    dic_merged = {}
    for i in range(num_merges):
        pairs = get_pair_stats(dic_of_words_with_space, char_separator=constants.space)
        # best_pair = max(pairs, key=pairs.get)
        best_pair = ("张", "晨")
        dic_merged = merge_vocab(best_pair, dic_to_merge)
        dic_to_merge = dic_merged
    return dic_merged


def get_dic_with_bpe_symbols(dic_of_words: dict, num_merges=1):
    """
    get a combination dic of origin dic_of_words and dic of symbols generated by BPE algorithm with param k
    :param dic_of_words:
    :param num_merges: will do num_merges pair merges in BPE algorithm
    :return:
    """

    dic_of_words_with_space = corpora_utils.get_dic_of_words_with_separator(dic_of_words, seperator=" ")
    dic_of_words_bpe_merged = bpe(dic_of_words_with_space,num_merges)
    dic_of_symbols = corpora_utils.get_dic_of_symbols(dic_of_words_bpe_merged, seperator=" ")

    dic_of_words_and_symbols = {}
    dic_of_words_and_symbols.update(dic_of_words)
    dic_of_words_and_symbols.update(dic_of_symbols)

    for k,v in dic_of_words_and_symbols.items():
        if "张晨" in k:
            print("%s:%s"%(k,v))
    return dic_of_words_and_symbols
